// ? ____________________stock data table ___________________

const displayStock = async () => {
	spinner.style.display = 'flex';

	$('#stockTable').DataTable().clear().draw();

	let promise = await db
		.collection('stock')
		.get()
		.then(async (snapshot) => {
			let p = await snapshot.docs.forEach((doc) => {
				$('#stockTable')
					.DataTable()
					.row.add([
						doc.data().p_name,
						doc.data().pc_name,
						doc.data().p_hsn,
						doc.data().p_unit,
						doc.data().p_qty,
						doc.data().p_price,
					])
					.draw(false);
			});
		})
		.catch((e) => {
			console.log(e);
		});

	spinner.style.display = 'none';
};

const wareSel = document.getElementById('wareSel');

const displaySelWare = async () => {
	let promise = await db
		.collection('warehouses')
		.get()
		.then(async (snapshot) => {
			let p = await snapshot.docs.forEach((doc) => {
				wareSel.innerHTML +=
					'	<option value="' +
					doc.data().w_name +
					'">' +
					doc.data().w_name +
					'<option>';
			});
		});
	$('select').material_select();
};

displayStock();
displaySelWare();

// ? _________________ adding stock data through csv ______________

const stockAddForm = document.getElementById('stockAddForm');

//// form handling of stock data
stockAddForm.addEventListener('submit', (evt) => {
	evt.preventDefault();

	let file = stockAddForm.stockCsv.files[0];
	let wareSel = stockAddForm.wareSel.value;

	// parsing the csv file
	Papa.parse(file, {
		header: true,
		dynamicTyping: true,
		before: () => {
			spinner.style.display = 'flex';
		},
		error: (e) => {
			console.log(e);
		},
		complete: (results) => {
			arrObj = results.data;

			let len = arrObj.length;

			addBulkStock(arrObj, len, wareSel);
			spinner.style.display = 'none';
		},
	});
});

//// adding stock with csv
const addBulkStock = async (arrObj, len, wareSel) => {
	let batch1 = db.batch(); // creating a batch in of database
	let batch2 = db.batch();

	console.log(arrObj);
	console.log(len);
	//  looping through all entities in csv file
	for (let i = 0; i < len - 1; i++) {
		let dt = currTime();
		let n = new Date();
		let ct = n.getTime(); // getting the time in secs for ordering
		console.log(dt);
		let dataTrans = {
			w_name: wareSel,
			p_name: arrObj[i].product,
			pc_name: arrObj[i].productCategory,
			p_qty: arrObj[i].qty,
			p_price: arrObj[i].price,
			timing: dt,
			ct: ct,
		};

		let docRefe = db.collection('transactions').doc(); // ref to autogenerated doc

		batch2.set(docRefe, dataTrans);

		let promise2 = await db
			.collection('stock')
			.where('w_name', '==', wareSel)
			.where('p_name', '==', arrObj[i].product)
			.where('p_price', '==', arrObj[i].price)
			.get()
			.then(async (snapshot) => {
				let flag = true;
				let p = await snapshot.docs.forEach(async (doc) => {
					flag = false;

					let newQty = doc.data().qty + arrObj[i].price;

					let pp = await db
						.collection('stock')
						.doc(doc.id)
						.update({ p_qty: newQty })
						.then(() => {
							console.log('done');
						})
						.catch((e) => {
							console.log(e);
						});
				});

				if (flag) {
					let pro = await db
						.collection('product-categories')
						.where('pc_name', '==', arrObj[i].productCategory)
						.get()
						.then(async (snapshot) => {
							let p = await snapshot.docs.forEach((doc) => {
								console.log(doc.data().pc_name);
								let data = {
									w_name: wareSel,
									p_name: arrObj[i].product,
									pc_name: doc.data().pc_name,
									p_unit: doc.data().pc_unit,
									p_hsn: doc.data().pc_hsn,
									p_qty: arrObj[i].qty,
									p_price: arrObj[i].price,
								};

								let docRef = db.collection('stock').doc(); // ref to autogenerated doc

								batch1.set(docRef, data);
							});
						})
						.catch((e) => {
							console.log(e);
						});
				}
			});
	}

	// commiting batch1 for stocks
	batch1
		.commit()
		.then(() => {
			swal('added stock data !');
		})
		.catch((e) => {
			console.log(e);
		});

	// commiting batch2 for transactions
	batch2
		.commit()
		.then(() => {
			console.log('transactions updated!');
		})
		.catch((e) => {
			console.log(e);
		});
};

//// getting current time
const currTime = () => {
	var today = new Date();

	var date =
		today.getFullYear() +
		'-' +
		(today.getMonth() + 1) +
		'-' +
		today.getDate();
	var time =
		today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();

	return date + ' ' + time;
};
